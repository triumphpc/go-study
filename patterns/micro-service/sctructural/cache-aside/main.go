// Паттерн "Cache-Aside" (или "Lazy Loading") — это популярный шаблон кэширования, который используется для повышения
//производительности приложений за счет уменьшения нагрузки на базу данных или другие медленные источники данных.
//В этом паттерне приложение сначала проверяет кэш на наличие данных, и если данные отсутствуют, загружает их из источника данных и сохраняет в кэше для последующего использования.
//
//Когда использовать Cache-Aside
//Часто запрашиваемые данные: Когда у вас есть данные, которые часто запрашиваются, но редко изменяются.
//Медленные источники данных: Когда доступ к данным из источника (например, базы данных) медленный или ресурсоемкий.
//Снижение нагрузки: Когда вы хотите снизить нагрузку на базу данных или другой источник данных.
//Плюсы Cache-Aside
//Улучшение производительности: Снижает время отклика за счет уменьшения количества обращений к медленным источникам данных.
//Гибкость: Приложение контролирует, какие данные и когда кэшировать.
//Простота реализации: Легко реализуется в большинстве приложений.
//Минусы Cache-Aside
//Устаревшие данные: Кэш может содержать устаревшие данные, если они изменяются в источнике данных.
//Управление кэшем: Требуется логика для управления кэшем, включая обновление и удаление устаревших данных.
//Дополнительная сложность: Добавляет сложность в код приложения, так как необходимо обрабатывать логику кэширования.

package main

import (
	"fmt"
	"time"
)

// Симуляция базы данных
var database = map[string]string{
	"user:1": "John Doe",
	"user:2": "Jane Smith",
}

// Кэш
var cache = make(map[string]string)

// GetFromCacheOrDB пытается получить данные из кэша, если не удается, то из базы данных
func GetFromCacheOrDB(key string) string {
	// Проверяем кэш
	if value, found := cache[key]; found {
		fmt.Println("Cache hit")
		return value
	}

	// Если в кэше нет, загружаем из базы данных
	fmt.Println("Cache miss")
	if value, found := database[key]; found {
		// Сохраняем в кэш
		cache[key] = value
		return value
	}

	return ""
}

func main() {
	// Пример использования
	fmt.Println("Fetching user:1")
	fmt.Println("Result:", GetFromCacheOrDB("user:1"))

	// Повторный запрос, должен быть кэширован
	fmt.Println("Fetching user:1 again")
	fmt.Println("Result:", GetFromCacheOrDB("user:1"))

	// Запрос другого пользователя
	fmt.Println("Fetching user:2")
	fmt.Println("Result:", GetFromCacheOrDB("user:2"))

	// Симуляция устаревания данных в кэше
	time.Sleep(2 * time.Second)
	delete(cache, "user:1")

	// Повторный запрос после удаления из кэша
	fmt.Println("Fetching user:1 after cache expiration")
	fmt.Println("Result:", GetFromCacheOrDB("user:1"))
}
