// Паттерн "Request-Reply" (Запрос-Ответ) — это широко используемый шаблон взаимодействия в распределенных системах,
// где одна система (клиент) отправляет запрос другой системе (серверу) и ожидает ответа. Этот паттерн является основой
// для многих сетевых протоколов и используется в различных сценариях, таких как HTTP-запросы, удаленные вызовы процедур (RPC)
// и взаимодействие с очередями сообщений.

// Плюсы Request-Reply
//Простота: Паттерн легко понять и реализовать, так как он соответствует привычной модели взаимодействия клиент-сервер.
//Синхронность: Клиент получает немедленный ответ, что упрощает обработку данных и ошибок.
//Контроль потока: Клиент может контролировать поток данных, отправляя запросы по мере необходимости.
//Совместимость: Поддерживается многими протоколами и библиотеками, что облегчает интеграцию.

// Минусы Request-Reply
// Блокировка: Клиент может блокироваться в ожидании ответа, что может привести к снижению производительности.
// Зависимость от сети: Задержки в сети могут негативно повлиять на время отклика.
// Ограниченная масштабируемость: Синхронная природа паттерна может ограничивать масштабируемость системы.
// Надежность: Если сервер недоступен, клиент может не получить ответ, что требует дополнительных механизмов обработки ошибок.
package main

import (
	"fmt"
	"net/http"
)

func handler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello, this is the server response!")
}

func main() {
	http.HandleFunc("/", handler)
	fmt.Println("Server is listening on port 8080...")
	http.ListenAndServe(":8080", nil)
}
