// Паттерн "Ambassador" (Амбассадор) — это структурный паттерн проектирования, который используется для создания
//вспомогательного сервиса или компонента, который действует как посредник между клиентом и удаленным сервисом.
//Этот паттерн часто используется в распределенных системах и микросервисной архитектуре для решения различных задач,
//таких как управление сетевыми вызовами, обработка ошибок, кэширование и мониторинг.

// Паттерн Ambassador полезен в ситуациях, когда необходимо управлять сложными взаимодействиями с удаленными сервисами,
//улучшать надежность и упрощать код клиента. Он позволяет сосредоточить общие задачи, такие как обработка ошибок и мониторинг, в одном месте, что упрощает поддержку и расширение системы.

package ambassador

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"time"
)

type Ambassador struct {
	client *http.Client
}

func (a *Ambassador) CallExternalService(endpoint string) (string, error) {
	// Пример обработки повторных попыток
	for i := 0; i < 3; i++ {
		resp, err := a.client.Get(endpoint)
		if err == nil && resp.StatusCode == http.StatusOK {
			body, _ := ioutil.ReadAll(resp.Body)
			return string(body), nil
		}
		time.Sleep(2 * time.Second) // Задержка перед повторной попыткой
	}
	return "", fmt.Errorf("failed to call external service")
}
