// Паттерн "Saga" — это архитектурный шаблон, используемый для управления долгоживущими транзакциями в распределенных системах.
//В отличие от традиционных ACID-транзакций, которые требуют блокировки ресурсов до завершения всех операций,
//Saga разбивает транзакцию на серию более мелких шагов, каждый из которых является отдельной транзакцией.
//Если один из шагов не удается, выполняются компенсирующие действия для отката предыдущих шагов.

// Когда использовать Saga
//Долгоживущие транзакции: Когда транзакции занимают значительное время и не могут быть выполнены в рамках одной ACID-транзакции.
//Микросервисные архитектуры: Когда транзакции затрагивают несколько микросервисов, и требуется управление согласованностью данных.
//Высокая доступность: Когда необходимо обеспечить высокую доступность и отказоустойчивость системы.

//Плюсы Saga
//Масштабируемость: Позволяет распределять транзакции между несколькими сервисами без блокировки ресурсов.
//Гибкость: Поддерживает различные стратегии выполнения и отката транзакций.
//Отказоустойчивость: Обеспечивает согласованность данных даже в случае сбоев.

// Минусы Saga
// Сложность реализации: Требует тщательного проектирования и реализации логики управления транзакциями и компенсации.
// Устаревшие данные: Возможны временные несогласованности данных между шагами транзакции.
// Задержки: Может увеличивать время выполнения транзакции из-за необходимости выполнения компенсационных операций.

// Структура и управление:
//Saga: Это последовательность транзакций, где каждая транзакция имеет свою компенсирующую транзакцию.
//Saga может быть организована как последовательность шагов, где каждый шаг выполняется независимо, и в случае сбоя выполняются компенсирующие действия для всех предыдущих успешных шагов.
//Compensating Transaction: Это более общий подход, где компенсирующие транзакции используются для отката изменений,
//если основная транзакция не удалась. Это может быть применено к любой транзакции, а не только к последовательности шагов.

//Оркестрация:
//Saga: Может быть реализована с оркестрацией (централизованное управление) или хореографией (децентрализованное управление).
//В оркестрации один компонент управляет выполнением всех шагов, тогда как в хореографии каждый шаг знает, что делать дальше.
//Compensating Transaction: Обычно не имеет сложной оркестрации, так как это просто механизм отката изменений.

// Применение:
// Saga: Часто используется в микросервисных архитектурах для управления долгоживущими транзакциями, которые затрагивают несколько сервисов.
// Compensating Transaction: Может использоваться в различных сценариях, где требуется откат изменений, включая, но не ограничиваясь, микросервисами.
package main

import (
	"errors"
	"fmt"
)

// SagaStep - интерфейс для шагов саги
type SagaStep interface {
	Execute() error
	Compensate() error
}

// ReserveSeat - шаг резервирования места
type ReserveSeat struct {
	seatID string
}

func (r *ReserveSeat) Execute() error {
	fmt.Println("Reserving seat:", r.seatID)
	// Симуляция успешного выполнения
	return nil
}

func (r *ReserveSeat) Compensate() error {
	fmt.Println("Releasing seat:", r.seatID)
	// Симуляция успешного отката
	return nil
}

// ProcessPayment - шаг обработки платежа
type ProcessPayment struct {
	amount float64
}

func (p *ProcessPayment) Execute() error {
	fmt.Println("Processing payment of:", p.amount)
	// Симуляция ошибки
	return errors.New("payment failed")
}

func (p *ProcessPayment) Compensate() error {
	fmt.Println("Refunding payment of:", p.amount)
	// Симуляция успешного отката
	return nil
}

// ExecuteSaga - выполняет сагу с компенсацией
func ExecuteSaga(steps []SagaStep) error {
	for i, step := range steps {
		if err := step.Execute(); err != nil {
			fmt.Println("Error:", err)
			// Выполняем компенсацию для всех предыдущих шагов
			for j := i - 1; j >= 0; j-- {
				steps[j].Compensate()
			}
			return err
		}
	}
	return nil
}

func main() {
	steps := []SagaStep{
		&ReserveSeat{seatID: "A1"},
		&ProcessPayment{amount: 100.0},
	}

	if err := ExecuteSaga(steps); err != nil {
		fmt.Println("Saga failed:", err)
	} else {
		fmt.Println("Saga succeeded")
	}
}
