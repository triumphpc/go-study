// Паттерн "Sidecar" — это архитектурный шаблон, который используется для расширения функциональности приложения без изменения его кода.
//Он предполагает развертывание вспомогательного контейнера (sidecar) вместе с основным приложением в одном поде (в случае Kubernetes).
//Sidecar контейнеры могут выполнять различные задачи, такие как логирование, мониторинг, маршрутизация трафика и управление конфигурацией.
//
//Проблемы, которые решает Sidecar
//Разделение обязанностей: Позволяет отделить вспомогательные функции от основного приложения, что упрощает разработку и поддержку.
//Повторное использование: Sidecar контейнеры могут быть использованы повторно в разных приложениях, что снижает дублирование кода.
//Упрощение обновлений: Обновление функциональности sidecar контейнера не требует изменения основного приложения.
//Управление конфигурацией: Sidecar может управлять конфигурацией приложения, например, загружать конфигурацию из внешнего источника.

// Плюсы Sidecar
// Разделение обязанностей: Sidecar позволяет отделить вспомогательные функции (например, логирование, мониторинг, маршрутизация) от основного приложения, что упрощает разработку и поддержку.
// Повторное использование: Sidecar контейнеры могут быть использованы повторно в разных приложениях, что снижает дублирование кода и усилий.
// Упрощение обновлений: Обновление функциональности sidecar контейнера не требует изменения основного приложения, что упрощает процесс обновления и развертывания.
// Управление конфигурацией: Sidecar может управлять конфигурацией приложения, например, загружать конфигурацию из внешнего источника, что упрощает управление конфигурацией.
// Улучшение безопасности: Sidecar может выполнять задачи безопасности, такие как шифрование трафика или аутентификация, без изменения основного приложения.
// Гибкость: Позволяет легко добавлять новые функции или изменять существующие без необходимости модификации основного приложения.
//
// Минусы Sidecar
// Сложность развертывания: Добавление sidecar контейнеров увеличивает сложность развертывания и управления, особенно в больших системах.
// Ресурсы: Sidecar контейнеры потребляют дополнительные ресурсы (CPU, память), что может быть критично в ресурсозатратных средах.
// Сложность отладки: Наличие нескольких контейнеров в одном поде может усложнить процесс отладки и мониторинга.
// Зависимости: Основное приложение может стать зависимым от sidecar контейнера, что может привести к проблемам, если sidecar контейнер не работает должным образом.
// Сетевые задержки: Использование прокси для перехвата трафика может добавить дополнительные сетевые задержки.
package main

import (
	"fmt"
	"net/http"
)

func handler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello, World!")
}

func main() {
	http.HandleFunc("/", handler)
	http.ListenAndServe(":8080", nil)

}
