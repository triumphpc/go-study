// Паттерн "Strangler Fig" используется для постепенной замены или модернизации устаревших систем или компонентов без
//необходимости полного переписывания или остановки системы. Название паттерна происходит от растения "удушающая фигура",
//которое растет вокруг дерева-хозяина, постепенно заменяя его. В контексте программирования, этот паттерн позволяет постепенно
//заменять старый код новым, минимизируя риски и обеспечивая непрерывность работы системы.
//
//Когда использовать Strangler Fig Pattern
//Модернизация устаревших систем: Когда необходимо обновить или заменить устаревшую систему или компонент.
//Минимизация рисков: Когда требуется минимизировать риски, связанные с заменой критически важных систем.
//Постепенная миграция: Когда необходимо постепенно мигрировать функциональность из старой системы в новую.
//Обеспечение непрерывности работы: Когда важно обеспечить непрерывность работы системы во время модернизации.
//Плюсы Strangler Fig Pattern
//Минимизация рисков: Позволяет постепенно заменять старый код новым, снижая риски сбоев и ошибок.
//Гибкость: Позволяет адаптировать и модернизировать систему поэтапно, без необходимости полной остановки.
//Обеспечение непрерывности: Обеспечивает непрерывность работы системы во время модернизации.
//Упрощение тестирования: Позволяет тестировать и внедрять новые компоненты поэтапно, упрощая отладку и тестирование.
//Минусы Strangler Fig Pattern
//Сложность управления: Требует управления двумя системами (старой и новой) в течение переходного периода.
//Увеличение сложности: Может временно увеличить сложность системы из-за наличия двух параллельных реализаций.
//Затраты времени и ресурсов: Постепенная миграция может занять больше времени и ресурсов по сравнению с полной заменой.
//Необходимость интеграции: Требуется интеграция старой и новой систем для обеспечения их совместной работы.

package main

import (
	"fmt"
)

// oldFunction - старая реализация функции
func oldFunction(input string) string {
	return "Old: " + input
}

// newFunction - новая реализация функции
func newFunction(input string) string {
	return "New: " + input
}

// stranglerFig - функция, которая решает, какую реализацию использовать
func stranglerFig(input string, useNew bool) string {
	if useNew {
		return newFunction(input)
	}
	return oldFunction(input)
}

func main() {
	inputs := []string{"data1", "data2", "data3"}

	// Используем старую реализацию
	for _, input := range inputs {
		fmt.Println(stranglerFig(input, false))
	}

	// Переходим на новую реализацию
	for _, input := range inputs {
		fmt.Println(stranglerFig(input, true))
	}
}
