// Паттерн "Edge Workload Configuration" используется для управления и оптимизации выполнения рабочих нагрузок на
//периферийных устройствах или узлах сети, таких как IoT-устройства, локальные серверы или граничные шлюзы. Этот паттерн
//позволяет распределять вычислительные задачи ближе к источнику данных, что может улучшить производительность, снизить задержки
//и уменьшить нагрузку на центральные серверы.
//
//Когда использовать Edge Workload Configuration Pattern
//Низкие задержки: Когда необходимо минимизировать задержки, обрабатывая данные ближе к их источнику.
//Ограниченные ресурсы: Когда центральные серверы перегружены, и требуется распределить нагрузку на периферийные устройства.
//Обработка данных в реальном времени: Когда требуется обрабатывать данные в реальном времени, например, в системах мониторинга или управления.
//Снижение нагрузки на сеть: Когда необходимо уменьшить объем данных, передаваемых в центральные системы, обрабатывая их на месте.

//Плюсы Edge Workload Configuration Pattern
//Улучшение производительности: Обработка данных на периферии может значительно снизить задержки и улучшить время отклика.
//Снижение нагрузки на сеть: Уменьшает объем данных, передаваемых в центральные системы, что снижает нагрузку на сеть.
//Масштабируемость: Позволяет распределять нагрузку между множеством периферийных устройств, улучшая масштабируемость системы.
//Надежность: Обеспечивает устойчивость к сбоям центральных систем, так как обработка данных может продолжаться на периферии.

//Минусы Edge Workload Configuration Pattern
//Сложность управления: Требует управления конфигурацией и обновлениями на множестве периферийных устройств.
//Безопасность: Необходимо обеспечить безопасность данных и устройств на периферии, что может быть сложнее, чем в централизованных системах.
//Ограниченные ресурсы: Периферийные устройства могут иметь ограниченные вычислительные ресурсы, что ограничивает сложность задач, которые могут быть выполнены.
//Согласованность данных: Необходимо обеспечить согласованность данных между периферийными устройствами и центральными системами.

package main

import (
	"fmt"
	"time"
)

// SensorData - структура, представляющая данные с датчика
type SensorData struct {
	Timestamp time.Time
	Value     float64
}

// processData - функция для обработки данных на периферии
func processData(data SensorData) {
	fmt.Printf("Processing data at edge: %v - Value: %.2f\n", data.Timestamp, data.Value)
	// Симулируем локальную обработку данных
	time.Sleep(500 * time.Millisecond)
}

func main() {
	// Симулируем получение данных с датчика
	for i := 0; i < 5; i++ {
		data := SensorData{
			Timestamp: time.Now(),
			Value:     float64(i) * 10.0,
		}
		processData(data)
		time.Sleep(1 * time.Second) // Симулируем интервал между получением данных
	}
}
