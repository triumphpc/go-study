// Паттерн "Health Endpoint Monitoring" используется для проверки состояния и доступности приложения или сервиса через специальные эндпоинты, которые предоставляют информацию о его текущем состоянии. Этот паттерн помогает обеспечить надежность и доступность системы, позволяя автоматически обнаруживать и реагировать на проблемы.
//
//Когда использовать Health Endpoint Monitoring
//Мониторинг доступности: Когда необходимо регулярно проверять доступность и работоспособность приложения или сервиса.
//Автоматическое восстановление: Когда требуется автоматическое обнаружение и восстановление в случае сбоев.
//Интеграция с системами оркестрации: Когда необходимо интегрировать приложение с системами оркестрации, такими как Kubernetes, для управления состоянием.
//Улучшение надежности: Когда требуется повысить надежность системы за счет своевременного обнаружения и устранения проблем.

//Плюсы Health Endpoint Monitoring
//Раннее обнаружение проблем: Позволяет быстро обнаруживать проблемы и реагировать на них до того, как они повлияют на пользователей.
//Автоматизация: Поддерживает автоматическое восстановление и управление состоянием через системы оркестрации.
//Улучшение надежности: Повышает надежность системы за счет регулярного мониторинга и своевременного реагирования на проблемы.
//Простота интеграции: Легко интегрируется с существующими системами мониторинга и оркестрации.

//Минусы Health Endpoint Monitoring
//Дополнительная нагрузка: Может добавить небольшую нагрузку на систему из-за регулярных проверок состояния.
//Сложность настройки: Требует настройки и управления эндпоинтами для мониторинга.
//Ограниченная информация: Может предоставлять ограниченную информацию о состоянии системы, если эндпоинты не настроены должным образом.
//Зависимость от сети: Мониторинг зависит от доступности сети и может быть подвержен сетевым сбоям.

package main

import (
	"encoding/json"
	"net/http"
)

// HealthResponse - структура для ответа о состоянии
type HealthResponse struct {
	Status  string `json:"status"`
	Message string `json:"message"`
}

// healthHandler - обработчик для эндпоинта состояния
func healthHandler(w http.ResponseWriter, r *http.Request) {
	response := HealthResponse{
		Status:  "Healthy",
		Message: "The service is running smoothly.",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func main() {
	http.HandleFunc("/health", healthHandler)
	http.ListenAndServe(":8080", nil)
}
