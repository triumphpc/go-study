// Паттерн "Valet Key" используется для предоставления ограниченного доступа к ресурсам или данным, без предоставления полного доступа.
//Это похоже на то, как вы даете ключ от автомобиля парковщику (valet), который позволяет ему только парковать машину,
//но не дает доступа к багажнику или другим функциям. В контексте программирования и систем безопасности, этот паттерн
//позволяет создавать временные или ограниченные ключи доступа, которые могут использоваться для выполнения определенных операций.
//
//Когда использовать Valet Key Pattern
//Ограничение доступа: Когда необходимо предоставить доступ к ресурсам или данным, но только для выполнения определенных операций.
//Безопасность: Когда требуется минимизировать риск несанкционированного доступа к данным или ресурсам.
//Временный доступ: Когда доступ должен быть предоставлен только на ограниченное время или для одной операции.
//Интеграция с внешними системами: Когда необходимо предоставить ограниченный доступ внешним системам или пользователям.

//Плюсы Valet Key Pattern
//Улучшенная безопасность: Ограничивает доступ к ресурсам, минимизируя риск несанкционированного доступа.
//Гибкость: Позволяет легко управлять доступом и изменять его в зависимости от требований.
//Контроль доступа: Обеспечивает точный контроль над тем, какие операции могут выполняться с ресурсами.
//Временные ключи: Позволяет создавать временные ключи доступа, которые автоматически истекают.

//Минусы Valet Key Pattern
//Сложность управления: Требует управления созданием, выдачей и истечением ключей доступа.
//Зависимость от конфигурации: Необходимо правильно настроить права доступа и ограничения для каждого ключа.
//Потенциальные уязвимости: Если ключи доступа не защищены должным образом, они могут быть скомпрометированы.
//Дополнительная логика: Требует дополнительной логики для проверки и управления ключами доступа.

package main

import (
	"fmt"
	"time"
)

// ValetKey - структура, представляющая ключ доступа
type ValetKey struct {
	ResourceID string
	ExpiresAt  time.Time
}

// NewValetKey - создает новый ключ доступа с ограниченным временем действия
func NewValetKey(resourceID string, duration time.Duration) *ValetKey {
	return &ValetKey{
		ResourceID: resourceID,
		ExpiresAt:  time.Now().Add(duration),
	}
}

// IsValid - проверяет, действителен ли ключ доступа
func (vk *ValetKey) IsValid() bool {
	return time.Now().Before(vk.ExpiresAt)
}

// AccessResource - функция для доступа к ресурсу с использованием ключа
func AccessResource(vk *ValetKey) {
	if vk.IsValid() {
		fmt.Printf("Accessing resource %s\n", vk.ResourceID)
	} else {
		fmt.Println("Access denied: key has expired")
	}
}

func main() {
	// Создаем ключ доступа, действительный в течение 5 секунд
	valetKey := NewValetKey("resource123", 5*time.Second)

	// Пытаемся получить доступ к ресурсу
	AccessResource(valetKey)

	// Ждем 6 секунд и пытаемся снова
	time.Sleep(6 * time.Second)
	AccessResource(valetKey)
}
