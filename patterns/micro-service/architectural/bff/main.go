// Паттерн "Backends for Frontends" (BFF) используется для создания специализированных бэкендов, которые обслуживают
//запросы от конкретных клиентских приложений или интерфейсов. Это позволяет оптимизировать взаимодействие между
//клиентом и сервером, обеспечивая более эффективную и целенаправленную обработку данных. BFF-паттерн особенно
//полезен в системах с несколькими клиентскими интерфейсами, такими как веб-приложения, мобильные приложения и устройства IoT.

// Когда использовать Backends for Frontends Pattern
//Разные требования клиентов: Когда разные клиентские приложения имеют уникальные требования к данным и функциональности.
//Оптимизация производительности: Когда необходимо оптимизировать взаимодействие между клиентом и сервером, минимизируя объем передаваемых данных и количество запросов.
//Упрощение клиентской логики: Когда требуется уменьшить сложность клиентского кода, переместив часть логики на сервер.
//Разделение ответственности: Когда необходимо разделить ответственность за обработку данных между различными бэкендами.

//Плюсы Backends for Frontends Pattern
//Оптимизация взаимодействия: Позволяет оптимизировать взаимодействие между клиентом и сервером, обеспечивая более целенаправленную обработку данных.
//Гибкость: Позволяет легко адаптировать бэкенд к изменяющимся требованиям конкретного клиента.
//Упрощение клиентского кода: Перемещает часть логики на сервер, упрощая клиентский код и улучшая его поддерживаемость.
//Разделение ответственности: Обеспечивает четкое разделение ответственности между различными бэкендами, что упрощает разработку и поддержку.

//Минусы Backends for Frontends Pattern
//Увеличение сложности: Может увеличить сложность системы из-за необходимости управления несколькими бэкендами.
//Дублирование кода: Может привести к дублированию кода и логики между различными бэкендами.
//Увеличение затрат на разработку: Требует дополнительных усилий для разработки и поддержки нескольких бэкендов.
//Потенциальные проблемы с согласованностью: Может возникнуть сложность в обеспечении согласованности данных между различными бэкендами.

package main

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// Data - структура, представляющая данные
type Data struct {
	Message string `json:"message"`
}

// WebBackendHandler - обработчик для веб-клиента
func WebBackendHandler(w http.ResponseWriter, r *http.Request) {
	data := Data{Message: "Hello from Web Backend"}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(data)
}

// MobileBackendHandler - обработчик для мобильного клиента
func MobileBackendHandler(w http.ResponseWriter, r *http.Request) {
	data := Data{Message: "Hello from Mobile Backend"}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(data)
}

func main() {
	http.HandleFunc("/web", WebBackendHandler)
	http.HandleFunc("/mobile", MobileBackendHandler)

	fmt.Println("Server is running on port 8080")
	http.ListenAndServe(":8080", nil)
}
