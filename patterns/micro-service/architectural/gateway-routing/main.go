// Паттерн "Gateway Routing" используется для управления маршрутизацией запросов к различным сервисам или компонентам
//через единый шлюз (gateway). Этот паттерн позволяет централизовать логику маршрутизации, обеспечивая гибкость и
//упрощение архитектуры. Шлюз может направлять запросы на основе различных критериев, таких как URL, заголовки, параметры
//запроса или даже содержимое тела запроса.
//
//Когда использовать Gateway Routing Pattern
//Микросервисные архитектуры: Когда система состоит из множества микросервисов, и необходимо централизованно управлять маршрутизацией запросов.
//Упрощение клиентской логики: Когда требуется упростить клиентскую логику, предоставляя единый API для доступа к нескольким сервисам.
//Централизованное управление: Когда необходимо централизованно управлять доступом, безопасностью и мониторингом для нескольких сервисов.
//Гибкость маршрутизации: Когда требуется гибко управлять маршрутизацией запросов на основе различных критериев.
//Плюсы Gateway Routing Pattern
//Упрощение клиентской логики: Клиенты взаимодействуют с одним API, что упрощает их реализацию и поддержку.
//Централизованное управление: Обеспечивает централизованное управление маршрутизацией, доступом и безопасностью.
//Гибкость: Легко адаптируется к изменениям в архитектуре и требованиям системы.
//Мониторинг и логирование: Позволяет централизованно управлять мониторингом и логированием запросов.
//Минусы Gateway Routing Pattern
//Единая точка отказа: Шлюз может стать единой точкой отказа, если не предусмотрены механизмы отказоустойчивости.
//Сложность настройки: Требует тщательной настройки и управления логикой маршрутизации.
//Задержки: Может добавить задержки в обработку запросов из-за дополнительного уровня маршрутизации.
//Зависимость от шлюза: Все взаимодействия зависят от шлюза, что может ограничить гибкость системы.

package main

import (
	"fmt"
	"net/http"
)

// routeRequest - функция для маршрутизации запросов
func routeRequest(w http.ResponseWriter, r *http.Request) {
	switch r.URL.Path {
	case "/service-a":
		handleServiceA(w, r)
	case "/service-b":
		handleServiceB(w, r)
	default:
		http.Error(w, "Not Found", http.StatusNotFound)
	}
}

// handleServiceA - обработчик для сервиса A
func handleServiceA(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, "Response from Service A")
}

// handleServiceB - обработчик для сервиса B
func handleServiceB(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, "Response from Service B")
}

func main() {
	http.HandleFunc("/", routeRequest)
	fmt.Println("Gateway server is running on port 8080")
	http.ListenAndServe(":8080", nil)
}
