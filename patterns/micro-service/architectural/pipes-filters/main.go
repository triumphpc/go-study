// Паттерн "Pipes and Filters" — это архитектурный шаблон, который используется для обработки данных в виде последовательности шагов, где каждый шаг выполняет определенную операцию над данными. Данные проходят через серию фильтров, соединенных каналами (pipes), которые передают данные от одного фильтра к другому. Этот паттерн позволяет легко комбинировать и повторно использовать фильтры, а также упрощает добавление новых шагов в процесс обработки данных.
//
//Когда использовать Pipes and Filters Pattern
//Обработка данных: Когда необходимо выполнить серию преобразований или операций над данными.
//Гибкость и расширяемость: Когда требуется легко добавлять или изменять шаги в процессе обработки данных.
//Повторное использование: Когда фильтры могут быть повторно использованы в разных контекстах или приложениях.
//Параллельная обработка: Когда необходимо обрабатывать данные параллельно для повышения производительности.

//Плюсы Pipes and Filters Pattern
//Модульность: Каждый фильтр выполняет одну задачу, что упрощает разработку и тестирование.
//Повторное использование: Фильтры могут быть легко повторно использованы в других системах или процессах.
//Гибкость: Легко добавлять, удалять или изменять фильтры без изменения всей системы.
//Параллелизм: Фильтры могут работать параллельно, что повышает производительность.

//Минусы Pipes and Filters Pattern
//Задержки: Может возникнуть задержка из-за передачи данных между фильтрами.
//Сложность отладки: Отладка может быть сложной, так как данные проходят через несколько фильтров.
//Накладные расходы: Может потребоваться дополнительная память и ресурсы для передачи данных между фильтрами.
//Сложность управления состоянием: Если фильтры зависят от состояния, это может усложнить их реализацию.

package main

import (
	"fmt"
	"strings"
)

// Filter - интерфейс для фильтров
type Filter interface {
	Process(data string) string
}

// LowercaseFilter - фильтр для преобразования строки в нижний регистр
type LowercaseFilter struct{}

func (f LowercaseFilter) Process(data string) string {
	return strings.ToLower(data)
}

// TrimSpacesFilter - фильтр для удаления пробелов
type TrimSpacesFilter struct{}

func (f TrimSpacesFilter) Process(data string) string {
	return strings.TrimSpace(data)
}

// ExclamationFilter - фильтр для добавления восклицательного знака
type ExclamationFilter struct{}

func (f ExclamationFilter) Process(data string) string {
	return data + "!"
}

// ProcessData - функция для обработки данных через серию фильтров
func ProcessData(data string, filters []Filter) string {
	for _, filter := range filters {
		data = filter.Process(data)
	}
	return data
}

func main() {
	data := "  Hello World  "
	filters := []Filter{
		LowercaseFilter{},
		TrimSpacesFilter{},
		ExclamationFilter{},
	}

	result := ProcessData(data, filters)
	fmt.Println(result) // Вывод: "hello world!"
}
