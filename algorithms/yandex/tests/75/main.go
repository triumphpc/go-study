//Поиск связей.
// Если 4 человека (k=4). 3-е из них знаю 4-го, 4-й не знает никого.
// Найти наибыстейший варинт поиск целебрити

package main

func main() {

}

// Наивное решение
func find() {
	// 1. Пройтись по каждому и узнать знаю т ли они человека под N=1
	// Если его знают все N+1.. N
	// 2. Спрашиваем у него, знает ли он кого-то из них, еси не знает никого - то это и есть целебрити
	// Время алгоритма O(k^2)
}

type Person struct {
}

// Оптимальное решение
func find2(persons []Person) *Person {
	// 1. Возьмем двух людей из группы A и B
	// 2. Если A знает B, то A точно не знаменитость (они никого не должна знать)
	// 3. Если А не знает B, то B точно не знаменитость
	// 4. В конце останется один, которой не должен знать никого а все его знать - проверим честно это

	// Для реализации используем метод ддвух указателей
	l, r := 0, len(persons)-1

	for l != r {
		if persons[l].knows(&persons[r]) { // Берем две пары по указателям левому и правому
			l++
		} else { // Смещаем или левую или правую указатели
			r--
		}
	}

	// Далее проверяем, правда ли он является знаменитостью
	for i := 0; i < len(persons); i++ {
		if i != l && (!persons[i].knows(&persons[l])) || (persons[i].knows(&persons[l])) { // Кандидат не должен ззнать другого а другой должен знать его
			return nil
		}
	}

	return &persons[l]

	// Скорость алгоритмся O(k)
}

func (p *Person) knows(second *Person) bool {

}
