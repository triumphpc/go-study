package main

func main() {
	//fmt.Println(test()) // 3
	//fmt.Println(test2()) // 4
	//fmt.Println(test3()) // 2
	//fmt.Println(test4()) // 2
	//fmt.Println(test5()) // 1

}

func test() int {
	x := 1
	defer func() {
		// 3
		x++
		// 4
	}()

	x = 3

	return x // Возвращает 3
}

func test2() (x int) {
	// 0
	x = 1

	// 1

	defer func() { // Берет значение на момент возврата
		// 3 - так как были инициализация
		x++

		// 4 - так как была инициализация по указателю, то и возвращает 4
	}()

	// 1
	x = 3
	// 3

	return x // 3
}

func test3() (x int) {
	// в случае func() значение считывается исходя их выполнение всей фукнции. Т.е. в defer будет значение x, которое на выходе (1)
	defer func() {
		// 1
		x++
		// 2
	}()

	// 0
	x = 1
	// 1

	return x //1
}

func test4() (x int) {
	// в данном случае берется значение на момент запуска функции = 0. Не возвращает значение, поэтому  = 1
	defer func() { // Берет значение которое возвращает
		// 1
		x++
		// 2
	}()
	// 0
	x = 2
	// 2

	return 1 // Тут идет приравнивает x = 1
}

func test5() int {
	x := 1
	// в данном случае берется значение на момент запуска функции = 0. Не возвращает значение, поэтому  = 1
	defer func() { // Берет значение которое возвращает
		// 1
		x++
		// 2
	}()
	// 0
	x = 2
	// 2

	return 1 // просто возвращает 1
}
