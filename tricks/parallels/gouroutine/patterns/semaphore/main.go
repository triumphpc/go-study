// В Go семафор — это механизм, который можно использовать для управления доступом к общим ресурсам в многопоточной среде. Хотя Go не предоставляет встроенных семафоров, их можно реализовать с помощью каналов. Каналы в Go позволяют передавать данные между горутинами и могут быть использованы для синхронизации и управления доступом к ресурсам.
//
// Как работает семафор с каналами в Go
// Семафор с каналами в Go обычно реализуется с использованием буферизированного канала. Размер буфера определяет количество "разрешений", которые семафор может предоставить одновременно. Каждое разрешение представляет собой возможность для горутины выполнить определенную операцию.
//
// Основные операции:
// Захват разрешения (Acquire): Горутина пытается получить разрешение, отправляя значение в канал. Если канал заполнен, горутина блокируется до тех пор, пока не освободится место.
//
// Освобождение разрешения (Release): Горутина освобождает разрешение, извлекая значение из канала, что позволяет другой горутине получить доступ к ресурсу.
package main

import (
	"fmt"
	"sync"
	"time"
)

// Semaphore - структура, представляющая семафор
type Semaphore struct {
	permits chan struct{}
}

// NewSemaphore - создает новый семафор с заданным количеством разрешений
func NewSemaphore(maxPermits int) *Semaphore {
	return &Semaphore{
		permits: make(chan struct{}, maxPermits),
	}
}

// Acquire - захватывает разрешение
func (s *Semaphore) Acquire() {
	s.permits <- struct{}{}
}

// Release - освобождает разрешение
func (s *Semaphore) Release() {
	<-s.permits
}

func main() {
	// Создаем семафор с 2 разрешениями
	semaphore := NewSemaphore(2)

	var wg sync.WaitGroup

	// Запускаем 5 горутин, каждая из которых пытается получить доступ к ресурсу
	for i := 1; i <= 5; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()
			semaphore.Acquire()
			fmt.Printf("Goroutine %d acquired the semaphore\n", id)
			time.Sleep(1 * time.Second) // Симулируем работу
			fmt.Printf("Goroutine %d releasing the semaphore\n", id)
			semaphore.Release()
		}(i)
	}

	wg.Wait()
	fmt.Println("All goroutines have finished")
}
