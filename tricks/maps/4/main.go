package main

type T struct {
	n int
}

var x, y = T{}, T{9}

func main() {
	//[3]T{}[0] = y // 7: у вас нет адреса, так как массив это значение,
	//которое само по себе должно быть записано в переменную, и только потом с ним можно работать => ошибка

	[]T{
		2: x,
	}[0] = y
	// здесь мы инициализируем слайс типа T со 2-м элементом == x (т.е. T{}), а потом в нулевой элемент получившегося слайса пишем значение y.
	//Здесь всё ок, так как слайс это сложный тип, внутри работающий с указателем на массив.
	//Именно во внутренний массив и будет записано значение y.
	//Строка сама по себе бессмысленна, так как работать с результатом дальше нельзя. (но ошибки нет)

	map[int]T{}[5] = y
	// здесь мы создаем map с ключами типа int и элементами T, а дальше устанавливаем значение
	//элемента с индексом 5 в значение y. Опять же map это сложный тип, который по факту указатель
	//и поэтому мы можем работать со временно выделенной памятью. Опять же смысла нет, так как
	//дальше результат использовать нельзя. (но ошибки нет)

	[]T{2: x}[0].n = 6
	// здесь аналогично строке 13, но мы еще устанавливаем значение поля в 6. Проблем нет.

	//map[int]T{}[5].n = 7
	// в map нельзя менять значение поля элемента, который там хранится не по ссылке
	//(классический вопрос на Stack Overflow)

}
